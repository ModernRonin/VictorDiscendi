------------NEXT QUESTIONS------------
integrate dummy service
	3. trigger refresh msg instead of directly quering in init()
	4. add loading delay and disable refresh button while refreshing is underway

edit a tag (forms, UI changes to data (is that what reactive vars are for?))

find out whether there is a more flexible/custom way to map url endpoints than the attributes on the pages and router.infer

maybe just implement the whole thing in pure html, and only afterwards move to CSS
setup bulma

eventually swap out dummy service for the real one, injecting a localstorage based IPersistence implementation
eventually do away with all references to languages and words because this could be just as well anatomy questions
eventually allow to create multiple "databases"/sets, eg "English-German", "Anatomy" etc.

------------INITIAL THOUGHTS------------
interactions:
editing
    add word pair
    list word pairs
    edit
    import csv

    word pairs have tags associated
    timestamp (first entered)

learning
    parameters:
        direction: both, a->b, b->a
        method: multiple choice, free entry
        max-score to be included (default 0)
        tags to be included
        future: parameterize multiple choice with tags

    algorithmus:
        each pair has   
            count (how often asked)
            score (left, right)
            last asked (timestamp)
        count starts with 0
        score starts with -1
        lastAsked starts with DateTime.Min
        when a pair is involved in a question, the count is incremented
            if the question was answered
                correctly: the score is incremented (for the corresponding direction)
                incorrectly: the score is decremented (for the corresponding direction)
        the next question is picked from the set (as narrowed down by parameters) thus:
            consider pairs where at least one of the direction scores < maxScore
            ask them in the order from oldest lastAsked to newest
			pick the direction with the lesser score

		! deal with multiple correct answers for a question
		!? maybe at some point include time-to-answer in scoring

statistics:
    worst words
    oldest words
    %age with score>= 0
    over time


cross-cutting:
    persistence
    some sort of data sync, serverless because we don't wanna pay for a server, or maybe azure blob storage

	would be nice if persistence and wire format could be the same and be easily merged
	would be nice if we could re-use word lists without scoring for another user (far future, but...)
	separate into tables, each table a file
	table format csv

	all clients read/write on blob storage, and always as soon as possible
	concurrency no issue because who's gonna use multiple clients so concurrently that we get conflicts?
	
persisted data structure:
	(intentionally restricting to 2 languages; multiple languages makes everything a lot more complicated and if we ever want to re-use, like learn a 3rd language,
	we can just extract the word list of one language to initialize a new db)
	databasey from the start, so if we ever want to move from files to an SQL backstore, it'll be easy
		
		
data entry:
	prevent double entries
	warn about conflicts/synonyms





